/**
 * The Route class represents a route in the Ticket to Ride game.
 * A route has a starting city, an arrival city, and a color.
 * From Increment 3, a route can be owned by a player.
 */
class Route {
  /**
   * The color of the route.
   * @type {string}
   */
  couleur;

  /**
   * The arrival city of the route.
   * @type {Ville}
   */
  ville_arrivee;

  /**
   * The departure city of the route.
   * @type {Ville}
   */
  ville_depart;

  /**
   * Creates an instance of Route.
   * @param {Ville} ville_arrivee - The arrival city.
   * @param {Ville} ville_depart - The departure city.
   * @param {string} couleur - The color of the route.
   */
  constructor(ville_arrivee, ville_depart, couleur) {
    this.couleur = couleur;
    this.ville_arrivee = ville_arrivee;
    this.ville_depart = ville_depart;
  }

  /**
   * Returns the color of the route.
   * @returns {string} The color of the route.
   */
  getCouleur() {
    return this.couleur;
  }

  /**
   * Returns the arrival city of the route.
   * @returns {Ville} The arrival city.
   */
  getVilleArrivee() {
    return this.ville_arrivee;
  }

  /**
   * Returns the departure city of the route.
   * @returns {Ville} The departure city.
   */
  getVilleDepart() {
    return this.ville_depart;
  }

  /**
   * Returns a name for the route, combining the names of its start and end cities.
   * @returns {string} The name of the route (e.g., "Paris - Berlin").
   */
  getNom() {
    // Assuming Ville objects have a getNom() method
    return `${this.ville_arrivee.getNom()} - ${this.ville_depart.getNom()}`;
  }

  /**
   * Calculates and returns the "length" of the route, normalized to a value between 1 and 6.
   * This calculation uses a specific normalization based on predefined min/max distances.
   * @returns {number} The calculated length of the route (integer between 1 and 6).
   */
  getLongueur() {
    const dmin = Math.sqrt(Math.pow(94.0 - 88.0, 2) + Math.pow(15.0 - 52.0, 2));
    const dmax = 1000.0;

    // Assuming Ville objects have getX() and getY() methods
    const x = this.ville_arrivee.getX() - this.ville_depart.getX();
    const y = this.ville_arrivee.getY() - this.ville_depart.getY();
    let d = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));

    // Normalize the distance between 0 and 1
    let normalized = (d - dmin) / (dmax - dmin);

    // Calculate the ratio between 1 and 6, converted to an integer
    let ratio = Math.floor(1 + (normalized * (6 - 1)));

    // Limit the ratio to stay between 1 and 6
    if (ratio < 1) {
      ratio = 1;
    } else if (ratio > 6) {
      ratio = 6;
    }

    return ratio;
  }

  /**
   * Returns a string representation of the route including its name, color, and length.
   * @returns {string} A string representing the route (e.g., "Paris - Berlin /red-3").
   */
  versChaine() {
    return `${this.getNom()} /${this.getCouleur()}-${this.getLongueur()}`;
  }

  /**
   * Calculates the number of points gained for owning this route, based on its length.
   * The points are normalized from 1 to 15 based on a route length between 1 and 6.
   * @returns {number} The number of points gained (integer).
   */
  getNombrePoints() {
    // Normalize the route length between 0 and 1 (from 1 to 6)
    const normalized = (this.getLongueur() - 1) / (6 - 1);

    // Calculate points between 1 and 15
    const gain_points = Math.floor(1 + (normalized * (15 - 1)));

    return gain_points;
  }
}